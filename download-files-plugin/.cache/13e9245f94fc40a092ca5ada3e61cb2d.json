{"dependencies":[],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.upload = upload;\nfunction upload(selector, options = {}) {\n  let files = [];\n  const onUpload = options.onUpload || noop;\n  const input = document.querySelector(selector);\n\n  const preview = createElement({ tag: 'div', className: ['preview'] });\n\n  const open = createElement({\n    tag: 'button',\n    content: 'Открыть',\n    className: ['btn']\n  });\n\n  const upload = createElement({\n    tag: 'button',\n    content: 'Загрузить',\n    className: ['btn', 'primary']\n  });\n  upload.style.display = 'none';\n\n  if (options.multi) {\n    input.setAttribute('multiple', true);\n  }\n\n  if (options.accept && Array.isArray(options.accept)) {\n    input.setAttribute('accept', options.accept.join(','));\n  }\n\n  input.insertAdjacentElement('afterend', preview);\n  input.insertAdjacentElement('afterend', upload);\n  input.insertAdjacentElement('afterend', open);\n\n  const triggerInput = () => input.click();\n\n  const changeHandler = event => {\n    if (!event.target.files.length) {\n      return;\n    }\n\n    files = Array.from(event.target.files);\n    preview.innerHTML = '';\n    upload.style.display = 'inline';\n\n    files.forEach(file => {\n      if (!file.type.match('image')) {\n        return;\n      }\n\n      const reader = new FileReader();\n\n      reader.onload = e => {\n        preview.insertAdjacentHTML('afterbegin', `\n                    <div class=\"preview-image\">\n                        <div class=\"preview-remove\" data-name=\"${file.name}\">&times;</div>\n                        <img src=\"${reader.result}\" alt=\"${file.name}\" />\n                        <div class=\"preview-info\">\n                            <span>${file.name}</span>\n                            <span>${bytesToSize(file.size)}</span>\n                        </div>\n                    </div>\n                    `);\n      };\n\n      reader.readAsDataURL(file);\n    });\n  };\n\n  const removeHandler = event => {\n    if (!event.target.dataset.name) {\n      return;\n    }\n\n    const { name } = event.target.dataset;\n\n    files = files.filter(file => file.name !== name);\n\n    const block = preview.querySelector(`[data-name=\"${name}\"`).closest('.preview-image');\n\n    block.classList.add('remove');\n\n    setTimeout(() => block.remove(), 300);\n\n    if (!files.length) {\n      upload.style.display = 'none';\n    }\n  };\n\n  const clearPreview = node => {\n    node.style.bottom = 0;\n    node.innerHTML = `<div class=\"preview-info-progress\"></div>`;\n\n    return node;\n  };\n\n  const uploadHandler = () => {\n    preview.querySelectorAll('.preview-remove').forEach(node => node.remove());\n    const preivewInfo = Array.from(preview.querySelectorAll('.preview-info')).map(clearPreview);\n\n    onUpload(files, preivewInfo);\n  };\n\n  open.addEventListener('click', triggerInput);\n  input.addEventListener('change', changeHandler);\n  preview.addEventListener('click', removeHandler);\n  upload.addEventListener('click', uploadHandler);\n}\n\nfunction bytesToSize(bytes) {\n  const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB'];\n  if (bytes === 0) return '0 Byte';\n  const i = parseInt(Math.floor(Math.log(bytes) / Math.log(1024)));\n  return Math.round(bytes / Math.pow(1024, i), 2) + ' ' + sizes[i];\n}\n\nfunction createElement(options) {\n  const { tag, content, className = [] } = options;\n  const el = document.createElement(tag);\n\n  if (content) {\n    el.textContent = content;\n  }\n\n  if (className) {\n    el.classList.add(...className);\n  }\n\n  return el;\n}\n\nfunction noop() {}"},"hash":"bf2f991e03f3c9f21994b3575ff4c723"}